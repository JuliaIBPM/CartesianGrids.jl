var documenterSearchIndex = {"docs":
[{"location":"manual/overview/#Overview-of-staggered-grids","page":"Overview of staggered grids","title":"Overview of staggered grids","text":"","category":"section"},{"location":"manual/overview/","page":"Overview of staggered grids","title":"Overview of staggered grids","text":"In CartesianGrids, field data, such as velocity, vorticity and pressure, are stored on a staggered uniform grid. Such a grid is divided into cells, with edges (which, on a two-dimensional grid, are the same as faces) and nodes (cell centers). Nodes hold scalar-valued data. Edges, on the other hand, hold the components of vector-valued data that are normal to the respective edges; one component lies on the vertical edges, while the other is on the horizontal edges.","category":"page"},{"location":"manual/overview/","page":"Overview of staggered grids","title":"Overview of staggered grids","text":"Furthermore, there are two different cell types: primal and dual. On the physical grid, these cell types are offset with respect to each other by half a cell spacing in each direction. In other words, the four corners of the primal (resp. dual) cell are the nodes of four dual (resp. primary) cells.","category":"page"},{"location":"manual/overview/","page":"Overview of staggered grids","title":"Overview of staggered grids","text":"Thus, on a two-dimensional staggered grid, there are four distinct vector spaces, associated with where the data are held on the grid:","category":"page"},{"location":"manual/overview/","page":"Overview of staggered grids","title":"Overview of staggered grids","text":"dual nodes,\ndual edges,\nprimal nodes, and\nprimal edges.","category":"page"},{"location":"manual/overview/","page":"Overview of staggered grids","title":"Overview of staggered grids","text":"In CartesianGrids, these are each distinct data types. Furthermore, the relationships between these types are defined by an underlying grid shared by all. By convention, this grid is defined by the number of dual cells NX and NY in each direction; we will often refer to it as the dual grid. For example, Nodes{Dual,NX,NY} is the type for dual node data on this grid; Edges{Primal,NX,NY} is the type for edge data on the primal cells within this same NX by NY dual grid. Note that, even though this latter type is parameterized by NX and NY, these values do not correspond to the number of primal edges in each direction on this dual grid. These values always correspond to the number of dual cells on the grid, for any data type. This makes it clear the grid is shared by all data.","category":"page"},{"location":"manual/immersed/#Immersed-data-and-their-operations","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"","category":"section"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"defddt1fracmathrmd1mathrmdt\n\nrenewcommandvecboldsymbol\nnewcommanduvec1vechat1\nnewcommandutangentuvectau\nnewcommandunormaluvecn\n\nrenewcommanddmathrmd","category":"page"},{"location":"manual/immersed/#The-grid-in-physical-space","page":"Immersed data and their operations","title":"The grid in physical space","text":"","category":"section"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Thus far, we have not had to consider the relationship between the grid's index space and some physical space. All of the operations thus far have acted on the entries in the discrete fields, based only on their relative indices, and not on their physical coordinates. In this section, we will discuss the relationship between the grid's index space and physical space, and then in the next section we'll discuss how we can transfer data between these spaces.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Generically, we can write the relationship between the physical coordinates x and y, and the indices i and j of any grid point as","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"x(i) = (i - Delta i - i_0)Delta x quad y(j) = (j - Delta j - j_0)Delta x","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"The scaling between these spaces is controlled by Delta x, which represents the uniform size of each grid cell; note that grid cells are presumed to be square in CartesianGrids. The indices I_0 = (i_0j_0) represent the location of the origin in the index space for primal nodes. Why primal nodes? Since the underlying grid is composed of dual cells, then primal nodes sit at the corners of the domain, so it is the most convenient for anchoring the grid to a specific point. But, since some field data of the same index are shifted by half a cell in one or both directions, then Delta i and Delta j are included for such purposes; these are either 0 or 12, depending on the field type. For example, for a primal node, Delta i = 0, so that x(i_0) = 0; for a dual node, Delta i = 12, so that x(i_0) = -Delta x2.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"In particular, for our four different data types and their components","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Primal nodes: Delta i = 0, Delta j = 0\nDual nodes: Delta i = 12, Delta j = 12\nPrimal edges u: Delta i = 12, Delta j = 0\nPrimal edges v: Delta i = 0, Delta j = 12\nDual edges u: Delta i = 0, Delta j = 12\nDual edges v: Delta i = 12, Delta j = 0","category":"page"},{"location":"manual/immersed/#Regularization-and-interpolation","page":"Immersed data and their operations","title":"Regularization and interpolation","text":"","category":"section"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Based on this relationship between the physical space and the index space, we can now construct a means of transferring data between a point (xy) in the physical space and the grid points in its immediate vicinity. We say that such a point is immersed in the grid. The process of transferring from the point to the  grid is called regularization, since we are effectively smearing this data over some extended neighborhood; the opposite operation, transferring grid field data to an arbitrary point, is  interpolation. In CartesianGrids, both operations are carried out with the discrete  delta function (DDF), which is a discrete analog of the Dirac delta function. The  DDF generally has compact support, so that  it only interacts with a small number of grid points in the vicinity of a  given physical location. Since each of the different field types reside at  slightly different locations, the range of indices invoked in this interaction  will be different for each field type.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Regularization can actually take different forms. It can be a simple point-wise interpolation, the discrete analog of simply multiplying by the Dirac delta function:","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"f_i delta(mathbfx - mathbfx_i)","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"to immerse a value f_i based at point mathbfx_i = (x_iy_i).","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Alternatively, regularization can be carried out over a curve mathbfX(s), the analog of","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"int f(s) delta(mathbfx - mathbfX(s))mathrmds","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"or it can be performed volumetrically, corresponding to","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"int f(mathbfy) delta(mathbfx - mathbfy)mathrmdmathbfy","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"In this case, the function f is distributed over some region of space. In each of these cases, the discrete version is simply a sum over data at a finite number of discrete points, and the type of regularization is specified by providing an optional argument specifying the arclength, area or volume associated with each discrete point. These arguments are used to weight the sum.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Let's see the regularization and interpolation in action. We will set up a ring  of 100 points on a circle of radius 14 centered at (1212). This curve-  type regularization will be weighted by the arclength, ds, associated with each  of the 100 points.  On these points, we will  set vector-valued data in which the x component is uniformly equal to 1.0,  while the y component is set equal to the vertical position relative to the  circle center. We will regularize these vector data to a primal  edge field on the grid in which these points are immersed.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"using CartesianGrids\nusing Plots","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"n = 100;\nθ = range(0,stop=2π,length=n+1);\nx = 0.5 .+ 0.25*cos.(θ[1:n]);\ny = 0.5 .+ 0.25*sin.(θ[1:n]);\nds = 2π/n*0.25;\nX = VectorData(x,y);","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"The variable X now holds the coordinates of the immersed points. Now we will set up the vector-valued data on these points","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"f = VectorData(X);\nfill!(f.u,1.0);\nf.v .= X.v.-0.5;","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Note that we have ensured that f has the correct dimensions by supplying the coordinate data X. This first step also initializes the data to zeros.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Now, let's set up the grid. The physical domain will be of size 10 times 10, and we will use 100 dual grid cells in each direction. Allowing a single layer of ghost cells surrounding the domain, we use 102 cells, and set the cell size to 0.01. Also, we will set the (xy) origin to coincide with the lower left corner of the domain.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"nx = 102; ny = 102;\nq = Edges(Primal,(nx,ny));\nLx = 1.0;\ndx = Lx/(nx-2)","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Now we set up the regularization operator. To set it up, it needs to know the coordinate data of the set of immersed points, the grid cell size, and the weight to apply to each immersed point. Since this is a regularization of a curve, this weight is the differential arc length ds associated with each point. (This last argument is supplied as a scalar, since it is uniform.)","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"H = Regularize(X,dx,weights=ds)","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"We have omitted some optional arguments. For example, it chooses a default DDF kernel (the 3rd-order Yang kernel Yang3); this can be changed with the ddftype argument. Also, the lower left corner, where we've set the origin, is the location of the (11) primal node; this is the default choice for I0 (the tuple I_0 of coordinates in index space discussed in the previous section).","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Now we can apply the regularization operator. We supply the target field q as the first argument and the source data f as the second argument.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"H(q,f);\nplot(q)","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"We could also regularize this to a field of dual edges.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"p = Edges(Dual,(nx,ny));\nH(p,f);\nplot(p)","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Scalar-valued data on the immersed points can only be regularized to nodal fields; the syntax is similar, and the regularization operator does not need to be reconstructed:","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"g = ScalarData(X);\nfill!(g,1.0);\nw = Nodes(Dual,(nx,ny));\nH(w,g);\nplot(w)","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"For a given regularization operator, H, there is a companion interpolation operator, E. In CartesianGrids, this interpolation is also carried out with the same constructed operator, but with the arguments reversed: the grid field data are the source and the immersed points are the target. Note that interpolation is always a volumetric operation, so the weights assigned during the construction of the operator are not used in interpolation. Let's interpolate our regularized field back onto the immersed points.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"f2 = VectorData(X);\nH(f2,q);\nplot(f2.u,lab=\"u\")\nplot!(f2.v,lab=\"v\")","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Note that interpolation is not the inverse of regularization; we don't recover the original data when we regularize and then interpolate. However, there is generally a way to scale the quantities on the immersed points and on the grid so that H = E^T. If we want to force these operations to be transposes of each other, we can supply the issymmetric=true flag. This flag will override any supplied weights. But here, we will exclude it so that it defaults to the asymmetric form.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"H = Regularize(X,dx)","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"If we expect to carry out the regularization and interpolation a lot, then it is often sensible to construct matrix versions of these operators. This construction is sometimes a bit slow, but the resulting operators perform their operations much faster than the matrix-free operators described above. To generate these matrix operators, we have to supply the data types of the source and target of the operation. For example, for regularization from scalar field data to dual node data,","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"g = ScalarData(X);\nw = Nodes(Dual,(nx,ny));\nHmat = RegularizationMatrix(H,g,w);\nfill!(g,1.0);\nw .= Hmat*g;","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"In general, the interpolation matrix is separately constructed, and the source and target are reversed:","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Emat = InterpolationMatrix(H,w,g);\ng .= Emat*w;","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Alternatively, if the regularization and interpolation are symmetric, then we can get them both when we call for the regularization matrix:","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"H = Regularize(X,dx,issymmetric=true)\nHmat, Emat = RegularizationMatrix(H,g,w);","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"It might seem a bit funny to store them separately if they are just transposes of each other, but it is essential for the method dispatch that they are given separate types.","category":"page"},{"location":"manual/immersed/#Other-operations-with-point-type-data","page":"Immersed data and their operations","title":"Other operations with point-type data","text":"","category":"section"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"We have seen point-type data structures, ScalarData and VectorData; there is also a tensor type of data, TensorData, which holds the four components of a 2x2 tensor. One can regularize and interpolate with this tensor data, as well; its companion grid data structure is the EdgeGradient type, which is a wrapper for four Nodes structures: two Dual, and two Primal, where the four tensor components are naturally held on the grid.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"There are also some extensions of standard operations to the VectorData type. For example, we can add a tuple of two numbers to vector data, and these numbers get added to each entry in the set of points, component-wise. For example,","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Y = VectorData(4)\nY + (1,2)","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Subtraction also works, and the operations are commutable.","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"Another useful operation is a cross product, which can be carried out between a single scalar (treated as though it was the component of an out-of-plane vector) and VectorData:","category":"page"},{"location":"manual/immersed/","page":"Immersed data and their operations","title":"Immersed data and their operations","text":"using LinearAlgebra\nX = VectorData(4)\nfill!(X.u,1)\npointwise_cross(2.0,X)","category":"page"},{"location":"manual/fielddata/#Setting-up-field-data","page":"Setting up field data","title":"Setting up field data","text":"","category":"section"},{"location":"manual/fielddata/","page":"Setting up field data","title":"Setting up field data","text":"Let's see an example of creating a blank set of dual node data and filling it with something:","category":"page"},{"location":"manual/fielddata/","page":"Setting up field data","title":"Setting up field data","text":"w = Nodes(Dual,(5,4))\nw .= reshape(1:20,5,4)","category":"page"},{"location":"manual/fielddata/","page":"Setting up field data","title":"Setting up field data","text":"Other data types on the same grid can be set up in similar fashion. To ensure that they have a size that is consistent with the dual node data w, we can use this in place of the size:","category":"page"},{"location":"manual/fielddata/","page":"Setting up field data","title":"Setting up field data","text":"q = Edges(Primal,w);\nq.u[2,3] = 1;\nq","category":"page"},{"location":"manual/methods/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"manual/methods/#CartesianGrids.CircularConvolution","page":"Index","title":"CartesianGrids.CircularConvolution","text":"CircularConvolution{M, N, T}\n\nA preplanned, circular convolution operator on an M × N matrix of data of type T\n\nFields\n\nĜ: DFT coefficients of the convolution kernel\nF: preplanned rFFT operator\nF⁻¹: preplanned irFFT operator\nnthreads : optimized number of threads to use, if appropriate\npaddedSpace: scratch space to zero-pad the input matrix\nÂ: scratch space to store the DFT coefficients of the zero-padded input matrix\n\nConstructors:\n\nCircularConvolution(G::Matrix{T})\n\nExample:\n\njulia> G = repeat(1.0:3,1,4)\n3×4 Array{Float64,2}:\n 1.0  1.0  1.0  1.0\n 2.0  2.0  2.0  2.0\n 3.0  3.0  3.0  3.0\n\njulia> C = CircularConvolution(G)\nCircular convolution on a 3 × 4 matrix of data type Float64\n\njulia> C*reshape(1:12, 3, 4)\n3×4 Array{Int64,2}:\n 164  164  164  164\n 130  130  130  130\n 148  148  148  148\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.DDF-Tuple{}","page":"Index","title":"CartesianGrids.DDF","text":"DDF([ddftype=Roma],[dx=1.0])\n\nConstruct a discrete delta function operator. This is generally only needed internally by the Regularize operator, so the user doesn't have much need for accessing this directly. The default DDF is the Roma function, which has a support of 3 grid cells. Other choices are the Goza operator, which is a truncated Gaussian with 28 cells support, and the Witchhat, which has 2 cells support. The resulting operator is evaluated with one, two or three coordinate arguments, producing, respectively, 1-d, 2-d, or 3-d smeared delta functions. It can also be called with the usual Julia vectorized dot notation with arrays of arguments. The optional cell spacing argument dx rescales the coordinates by this spacing, and the result is also rescaled by this spacing (raised to the number of dimensions). This spacing argument defaults to 1.0.\n\njulia> ddf = DDF(ddftype=Roma)\nDiscrete delta function operator of type CartesianGrids.Roma, with spacing 1.0\n\njulia> ddf(1)\n0.16666666666666666\n\njulia> ddf(-1)\n0.16666666666666666\n\njulia> ddf.([-1,0,1])\n3-element Array{Float64,1}:\n 0.16666666666666666\n 0.6666666666666666\n 0.16666666666666666\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.EdgeGradient","page":"Index","title":"CartesianGrids.EdgeGradient","text":"EdgeGradient\n\nEdgeGradient is a wrapper for tensor-valued data that lie partly at the nodes of dual cells and primary cells. EdgeGradient type data have fields dudx, dudy, dvdx, dvdy for the components of the tensor field. The diagonal components lie at one set of nodes (e.g. Primal), and the offdiagonal at the other set (e.g. Dual).\n\nConstructors\n\nEdgeGradient(C,dims) creates a tensor field of zeros in cells of type C (where C is either Dual or Primal), on a grid of dimensions dims. Note that dims represent the number of dual cells on the grid.\nEdgeGradient(C,w) performs the same construction, but uses existing field data w of GridData type to determine the size of the grid.\nAdding the dtype= keyword allows the data type of the field data to be changed. The default is Float64, but can be changed to, e.g., ComplexF64\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.Edges","page":"Index","title":"CartesianGrids.Edges","text":"Edges\n\nEdges is a wrapper for vector-valued data that lie at the faces of either dual cells or primary cells. Edges type data have fields u and v for the components of the vector field. These are the normal components of the vector field on the vertical and horizontal faces of the corresponding cell.\n\nConstructors\n\nEdges(C,dims) creates a vector field of zeros in cells of type C (where C is either Dual or Primal), on a grid of dimensions dims. Note that dims represent the number of dual cells on the grid.\nEdges(C,w) performs the same construction, but uses existing field data w of GridData type to determine the size of the grid.\nAdding the dtype= keyword allows the data type of the field data to be changed. The default is Float64, but can be changed to, e.g., ComplexF64\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.GeneratedField","page":"Index","title":"CartesianGrids.GeneratedField","text":"GeneratedField(d::GridData,field::AbstractSpatialField...,grid::PhysicalGrid)\n\nCreate an instance of a spatial field function field on scalar grid data d, based on a grid grid. After creating the instance g = GeneratedField(d,field,grid), then the resulting grid data can be accessed by typing g(). For vector grid data, a separate field must be supplied for each component.\n\nIf the fields are time dependent, then you can also evaluate g(t) at the desired time. The time argument is ignored if the fields are static.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.InterpolationMatrix","page":"Index","title":"CartesianGrids.InterpolationMatrix","text":"InterpolationMatrix(H::Regularize,u::CellData,f::PointData) -> Emat\n\nConstruct and store a matrix representation of interpolation associated with H for data of type u to data of type f. The resulting matrix Emat can then be used to apply on grid data of type u to interpolate it to point data of type f, using mul!(f,Emat,u). It can also be used as just Emat*u.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.ModulatedField","page":"Index","title":"CartesianGrids.ModulatedField","text":"ModulatedField(g::GeneratedField,modfcn::Abstract1DProfile)\n\nCreate a time-modulated form of a generated spatial field, useful for introducing a forcing field onto the grid. The supplied field g is modulated by a function modfcn with a specified profle shape. The resulting object can be evaluated with a single argument (time) and returns a GridData type object of the same type contained in g.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.NodePair","page":"Index","title":"CartesianGrids.NodePair","text":"NodePair\n\nNodePair is a wrapper for vector-valued data that lie at the nodes of dual cells and primal cells. NodePair type data have fields u and v for the components of the vector field. These are the normal components of a vector field on nodes that form the faces of a virtual cell centered at one of the faces of the primal cell.\n\nConstructors\n\nNodePair(C,dims) creates a vector field of zeros in cells of type C (where C is either Dual or Primal), on a grid of dimensions dims. Note that dims represent the number of dual cells on the grid.\nNodePair(C,w) performs the same construction, but uses existing field data w of GridData type to determine the size of the grid.\nAdding the dtype= keyword allows the data type of the field data to be changed. The default is Float64, but can be changed to, e.g., ComplexF64\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.Nodes","page":"Index","title":"CartesianGrids.Nodes","text":"Nodes\n\nNodes is a wrapper for scalar-valued data that lie at the centers of either dual cells or primary cells. A Nodes type can be accessed by indexing like any other array, and allows the use of size, similar, zero functions.\n\nConstructors\n\nNodes(C,dims) creates a field of zeros in cells of type C (where C is either Dual or Primal), on a grid of dimensions dims (a tuple). Note that dims represent the number of dual cells on the grid, even if C is Primal.\nNodes(C,w) performs the same construction, but uses existing field data w of GridData type to determine the size of the grid.\nAdding the dtype= keyword allows the data type of the field data to be changed. The default is Float64, but can be changed to, e.g., ComplexF64\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.PhysicalGrid-Tuple{Tuple{Real, Real}, Tuple{Real, Real}, Float64}","page":"Index","title":"CartesianGrids.PhysicalGrid","text":"PhysicalGrid(xlim::Tuple{Real,Real},ylim::Tuple{Real,Real},Δx::Float64;[opt_type=:none,optimize_threads=false,nthreads_max=1])\n\nConstructor to set up a grid connected to physical space. The region to be discretized by the grid is defined by the limits xlim and ylim, and the cell spacing (uniform and indentical in each direction) is specified by Δx. The constructor uses this information to determine the number of cells in each direction, expanding the given range if necessary to accommodate an integer number. It also pads each side with a ghost cell. It also determines the indices corresponding to the corner of the cell to which the physical origin corresponds. Note that the corner corresponding to the lowest limit in each direction has indices (1,1).\n\nThere are a few optional arguments devoted to optimization of the grid size. The nthreads_max sets the number of FFT compute threads to use and  can be set to a value up to the total number available on the architecture. It defaults to 1. \n\nThe keyword opt_type can be set to :threads, :prime (default), or :none. If :none, then the grid is set as close to the specified range as possible. If :prime, then the grid is expanded in each direction to a number that is a product of primes (and therefore efficient in an FFT). If :threads, then the grid is tested with a representative calculation on various grid sizes to identify one that has the minimum cpu time. If optimize_threads = true, then the number of threads is also varied (between 1 and nthreads_max).\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.RegularizationMatrix","page":"Index","title":"CartesianGrids.RegularizationMatrix","text":"RegularizationMatrix(H::Regularize,f::PointData,u::CellData) -> Hmat\n\nConstruct and store a matrix representation of regularization associated with H for data of type f to data of type u. The resulting matrix Hmat can then be used to apply on point data of type f to regularize it to grid data of type u, using mul!(u,Hmat,f). It can also be used as just Hmat*f.\n\nIf H is a symmetric regularization and interpolation operator, then this actually returns a tuple Hmat, Emat, where Emat is the interpolation matrix.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.Regularize-Union{Tuple{D}, Tuple{T}, Tuple{AbstractVector{D}, AbstractVector{D}, T}} where {T<:Real, D<:Real}","page":"Index","title":"CartesianGrids.Regularize","text":"Regularize(x,y,dx,[ddftype=Yang3],[graddir=0],[I0=(1,1)], [weights=1.0], [filter=false],\n                   [issymmetric=false])\n\nConstructor to set up an operator for regularizing and interpolating data from/to points immersed in the grid to/from fields on the grid itself. The supplied x and y represent physical coordinates of the immersed points, and dx denotes a uniform physical cell size of the grid. The separate arguments x and y can be replaced by a single argument X of type VectorData holding the coordinates.\n\nThe operations of regularization and interpolation are carried out with a discrete delta function (ddf), which defaults to the type Yang3. Others are also possible, such as Roma, Goza or M3. The optional argument graddir, if set to 1 or 2, will generate an interpolation operator that evaluates the negative of the respective component of the gradient of a grid field at the immersed points. The default value of this argument is 0, which simply interpolates. Note that the regularization form of this gradient type is also possible.\n\nThe optional tuple I0 represents the indices of the primary node that coincides with (x,y) = (0,0). This defaults to (1,1), which leaves one layer of ghost (dual) cells and sets the physical origin in the lower left corner of the grid of interior dual cells.\n\nAnother optional parameter, weights, sets the weight of each point in the regularization. This would generally be set with, say, the differential arc length for regularization of data on a curve. It can be a vector (of the same length as x and y) or a scalar if uniform. It defaults to 1.0.\n\nThe optional Boolean parameter filter can be set to true if it is desired to apply filtering (see Goza et al, J Comput Phys 2016) to the grid data before interpolating. This is generally only used in the context of preconditioning the solution for forces on the immersed points.\n\nIf the optional Boolean parameter issymmetric is set to true, then the regularization and interpolation are constructed to be transposes of each other. Note that this option overrides any supplied weights. The default of this parameter is false.\n\nThe resulting operator can be used in either direction, regularization and interpolation, with the first argument representing the target (the entity to regularize/interpolate to), and the second argument the source (the entity to regularize/interpolate from). The regularization does not use the filtering option.\n\nExample\n\nIn the example below, we set up a 12 x 12 grid. Using the default value for I0 and setting dx = 0.1, the physical dimensions of the non-ghost part of the grid are 1.0 x 1.0. Three points are set up in the interior, and a vector field is assigned to them, with the x component of each of them set to 1.0. These data are regularized to a field of primal edges on the grid, using the Roma DDF kernel.\n\njulia> x = [0.25,0.75,0.25]; y = [0.75,0.25,0.25];\n\njulia> X = VectorData(x,y);\n\njulia> q = Edges(Primal,(12,12));\n\njulia> dx = 0.1;\n\njulia> H = Regularize(x,y,dx;ddftype=Roma)\nRegularization/interpolation operator with non-filtered interpolation\n  DDF type CartesianGrids.Roma\n  3 points in grid with cell area 0.01\n\njulia> f = VectorData(X);\n\njulia> fill!(f.u,1.0);\n\njulia> H(q,f)\nEdges{Primal,12,12,Float64} data\nu (in grid orientation)\n11×12 Array{Float64,2}:\n 0.0  0.0  0.0       0.0     0.0      …  0.0       0.0     0.0      0.0  0.0\n 0.0  0.0  0.0       0.0     0.0         0.0       0.0     0.0      0.0  0.0\n 0.0  0.0  8.33333  33.3333  8.33333     0.0       0.0     0.0      0.0  0.0\n 0.0  0.0  8.33333  33.3333  8.33333     0.0       0.0     0.0      0.0  0.0\n 0.0  0.0  0.0       0.0     0.0         0.0       0.0     0.0      0.0  0.0\n 0.0  0.0  0.0       0.0     0.0      …  0.0       0.0     0.0      0.0  0.0\n 0.0  0.0  0.0       0.0     0.0         0.0       0.0     0.0      0.0  0.0\n 0.0  0.0  8.33333  33.3333  8.33333     8.33333  33.3333  8.33333  0.0  0.0\n 0.0  0.0  8.33333  33.3333  8.33333     8.33333  33.3333  8.33333  0.0  0.0\n 0.0  0.0  0.0       0.0     0.0         0.0       0.0     0.0      0.0  0.0\n 0.0  0.0  0.0       0.0     0.0      …  0.0       0.0     0.0      0.0  0.0\nv (in grid orientation)\n12×11 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.ScalarData","page":"Index","title":"CartesianGrids.ScalarData","text":"ScalarData <: PointData\n\nA wrapper for a one-dimensional array of scalar-valued data. The resulting wrapper can be indexed in the same way as the array itself.\n\nConstructors\n\nScalarData(d::AbstractVector[,dtype=Float64]) constructs a wrapper for the one-dimensional array of data d\nScalarData(n::Int) constructs a wrapper for an array of zeros of length n.\nScalarData(x::PointData) constructs a wrapper for an array of zeros of the  same length as that wrapped by x.\nScalarData(n::Int,dtype=ComplexF64) constructs a wrapper for complex-valued data.\nScalarData(x::PointData,dtype=ComplexF64) constructs a wrapper for an array of  complex zeros of the same length as that wrapped by x.\n\nExample\n\njulia> f = ScalarData(10);\n\njulia> f[5] = 1.0;\n\njulia> f\n10 points of scalar-valued Float64 data\n10-element Array{Float64,1}:\n 0.0\n 0.0\n 0.0\n 0.0\n 1.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.TensorData","page":"Index","title":"CartesianGrids.TensorData","text":"TensorData <: PointData\n\nA wrapper for a one-dimensional array of 2x2 tensor-valued data, with fields dudx, dudy, dvdx, dvdy. The resulting wrapper can be indexed as though these four components are stacked on top of each other.\n\nConstructors\n\nTensorData(d::AbstractVector[,dtype=Float64]) constructs a wrapper for the one-dimensional array of data d, splitting d into the four components evenly.\nTensorData(dudx,dudy,dvdx,dvdy) constructs a wrapper for the tensor components data, each of type AbstractVector\nTensorData(n::Int) constructs a wrapper with zeros of length n for all components.\nTensorData(x::PointData[,dtype=Float64]) constructs a wrapper for zero components of the  same length as that wrapped by x.\n\nExample\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.VectorData","page":"Index","title":"CartesianGrids.VectorData","text":"VectorData <: PointData\n\nA wrapper for a one-dimensional array of two-component vector-valued data. The resulting wrapper can be indexed as though the first component and second component are stacked on top of each other.\n\nConstructors\n\nVectorData(d::AbstractVector[,dtype=Float64]) constructs a wrapper for the one-dimensional array of data d, splitting d into the u and v components evenly.\nVectorData(u::AbstractVector,v::AbstractVector) constructs a wrapper for the vector components data u and v.\nVectorData(n::Int) constructs a wrapper with zeros of length n for both components.\nVectorData(x::PointData) constructs a wrapper for zero components of the  same length as that wrapped by x.\nVectorData(n::Int,dtype=ComplexF64) constructs a wrapper with complex-valued zeros  of length n for both components.\n\nExample\n\njulia> f = VectorData(10,dtype=ComplexF64);\n\njulia> f.v[1:5] = 1:5;\n\njulia> f\n10 points of vector-valued Complex{Float64} data\n10×2 Array{Complex{Float64},2}:\n 0.0+0.0im  1.0+0.0im\n 0.0+0.0im  2.0+0.0im\n 0.0+0.0im  3.0+0.0im\n 0.0+0.0im  4.0+0.0im\n 0.0+0.0im  5.0+0.0im\n 0.0+0.0im  0.0+0.0im\n 0.0+0.0im  0.0+0.0im\n 0.0+0.0im  0.0+0.0im\n 0.0+0.0im  0.0+0.0im\n 0.0+0.0im  0.0+0.0im\n\njulia> f[7] = 1im; f[18] = 0.2;\n\njulia> f\n10 points of vector-valued Complex{Float64} data\n10×2 Array{Complex{Float64},2}:\n 0.0+0.0im  1.0+0.0im\n 0.0+0.0im  2.0+0.0im\n 0.0+0.0im  3.0+0.0im\n 0.0+0.0im  4.0+0.0im\n 0.0+0.0im  5.0+0.0im\n 0.0+0.0im  0.0+0.0im\n 0.0+1.0im  0.0+0.0im\n 0.0+0.0im  0.2+0.0im\n 0.0+0.0im  0.0+0.0im\n 0.0+0.0im  0.0+0.0im\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.XEdges","page":"Index","title":"CartesianGrids.XEdges","text":"XEdges\n\nXEdges is a wrapper for scalar-valued data that lie at the centers of either dual cells or primary cells. A XEdges type can be accessed by indexing like any other array, and allows the use of size, similar, zero functions.\n\nConstructors\n\nXEdges(C,dims) creates a field of zeros in cells of type C (where C is either Dual or Primal), on a grid of dimensions dims (a tuple). Note that dims represent the number of dual cells on the grid, even if C is Primal.\nXEdges(C,w) performs the same construction, but uses existing field data w of GridData type to determine the size of the grid.\nAdding the dtype= keyword allows the data type of the field data to be changed. The default is Float64, but can be changed to, e.g., ComplexF64\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#CartesianGrids.YEdges","page":"Index","title":"CartesianGrids.YEdges","text":"YEdges\n\nYEdges is a wrapper for scalar-valued data that lie at the centers of either dual cells or primary cells. A YEdges type can be accessed by indexing like any other array, and allows the use of size, similar, zero functions.\n\nConstructors\n\nYEdges(C,dims) creates a field of zeros in cells of type C (where C is either Dual or Primal), on a grid of dimensions dims (a tuple). Note that dims represent the number of dual cells on the grid, even if C is Primal.\nYEdges(C,w) performs the same construction, but uses existing field data w of GridData type to determine the size of the grid.\nAdding the dtype= keyword allows the data type of the field data to be changed. The default is Float64, but can be changed to, e.g., ComplexF64\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#Base.:*-Union{Tuple{N}, Tuple{VectorData{N}, VectorData{N}}} where N","page":"Index","title":"Base.:*","text":"(*)(p::VectorData,q::VectorData) -> TensorData\n\nCalculate the element by element tensor product between vectors p and q, returning TensorData type.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.:+-Union{Tuple{T}, Tuple{VectorData, Tuple{T, T}}} where T<:Number","page":"Index","title":"Base.:+","text":"(+)(X::VectorData,a::Tuple{T,T}) where {T<:Number} -> VectorData\n(-)(X::VectorData,a::Tuple{T,T}) where {T<:Number} -> VectorData\n\nAdds or subtracts the tuple a component by component to each element of X. All data in a are converted to Float64. Can also switch the arguments.\n\nExample\n\njulia> f = VectorData(5);\n\njulia> f + (2,3)\n5 points of vector-valued Float64 data\n5×2 Array{Float64,2}:\n 2.0  3.0\n 2.0  3.0\n 2.0  3.0\n 2.0  3.0\n 2.0  3.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.Threads.nthreads-Tuple{PhysicalGrid}","page":"Index","title":"Base.Threads.nthreads","text":"nthreads(g::PhysicalGrid) -> Int\n\nReturn the maximum number of threads allowed for grid g.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.exp-Union{Tuple{CartesianGrids.Laplacian{NX, NY}}, Tuple{NY}, Tuple{NX}, Tuple{CartesianGrids.Laplacian{NX, NY}, Any}} where {NX, NY}","page":"Index","title":"Base.exp","text":"exp(L::Laplacian[,Nodes(Dual)][;nthreads=L.conv.nthreads])\n\nCreate the integrating factor exp(L). The default size of the operator is the one appropriate for dual nodes; another size can be specified by supplying grid data in the optional third argument. Note that, if L contains a factor, e.g., by multiplying a Laplacian by a scalar, it scales the exponent with this factor. The number of threads used by the resulting operator can be set by the nthreads optional argument; by default, it takes this number from L.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.length-Tuple{PhysicalGrid}","page":"Index","title":"Base.length","text":"length(g::PhysicalGrid,d::Int) -> Int\n\nReturn the total number of cells in grid g.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.size-Tuple{PhysicalGrid, Int64}","page":"Index","title":"Base.size","text":"size(g::PhysicalGrid,d::Int) -> Int\n\nReturn the number of cells in direction d in grid g.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.size-Tuple{PhysicalGrid}","page":"Index","title":"Base.size","text":"size(g::PhysicalGrid) -> Tuple\n\nReturn a tuple of the number of cells in all directions in grid g.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.transpose-Tuple{TensorData}","page":"Index","title":"Base.transpose","text":"transpose(p::TensorData) -> TensorData\n\nElement-by-element transpose of TensorData p\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.transpose-Union{Tuple{EdgeGradient{C, D, NX, NY}}, Tuple{NY}, Tuple{NX}, Tuple{D}, Tuple{C}} where {C<:CartesianGrids.CellType, D<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"Base.transpose","text":"transpose(p::EdgeGradient) -> EdgeGradient\n\nElement-by-element transpose of EdgeGradient p\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.zero-Union{Tuple{Type{T}}, Tuple{T}} where T<:GridData","page":"Index","title":"Base.zero","text":"zero(p::GridData)\n\nReturn data of the same type as p, filled with zeros.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.zero-Union{Tuple{Type{T}}, Tuple{T}} where T<:PointData","page":"Index","title":"Base.zero","text":"zero(p::PointData)\n\nReturn data of the same type as p, filled with zeros.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.cellsize-Tuple{PhysicalGrid}","page":"Index","title":"CartesianGrids.cellsize","text":"cellsize(g::PhysicalGrid) -> Float64\n\nReturn the grid cell size of grid g\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.convective_derivative!-Union{Tuple{C}, Tuple{Edges{C}, Edges{C}}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.convective_derivative!","text":"convective_derivative!(out,q)\n\nCompute the convective derivative of q in the form ucdotnabla u and put the result into out. Note that the result is not scaled by any grid spacing.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.convective_derivative_rot!-Union{Tuple{C}, Tuple{Edges{C}, Edges{C}}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.convective_derivative_rot!","text":"convective_derivative_rot!(out,q)\n\nCompute the rotational form of the convective derivative of q in the form frac12nablau^2-utimes(nablatimes u) and put the result into out. Note that the result is not scaled by any grid spacing.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.coordinates","page":"Index","title":"CartesianGrids.coordinates","text":"coordinates(w::GridData;[dx=1.0],[I0=(1,1)])\n\nReturn a tuple of the ranges of the physical coordinates in each direction for grid data w. If w is of Nodes type, then it returns a tuple of the form xg,yg. If w is of Edges or NodePair type, then it returns a tuple of the form xgu,ygu,xgv,ygv.\n\nThe optional keyword argument dx sets the grid spacing; its default is 1.0. The optional keyword I0 accepts a tuple of integers to set the index pair of the primal nodes that coincide with the origin. The default is (1,1).\n\nExample\n\njulia> w = Nodes(Dual,(12,22));\n\njulia> xg, yg = coordinates(w,dx=0.1)\n(-0.05:0.1:1.05, -0.05:0.1:2.0500000000000003)\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.coordinates-Tuple{Any, PhysicalGrid}","page":"Index","title":"CartesianGrids.coordinates","text":"coordinates(w::Nodes/Edges,g::PhysicalGrid) -> Range\n\nReturn coordinate data range for type of w.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.curl!-Union{Tuple{NY}, Tuple{NX}, Tuple{Edges{Primal, NX, NY}, Nodes{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.curl!","text":"curl!(q::Edges{Primal},w::Nodes{Dual})\n\nEvaluate the discrete curl of w and return it as q.\n\nExample\n\njulia> w = Nodes(Dual,(8,6));\n\njulia> w[3,4] = 1.0;\n\njulia> q = Edges(Primal,w);\n\njulia> curl!(q,w)\nEdges{Primal,8,6,Float64} data\nu (in grid orientation)\n5×8 Array{Float64,2}:\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  -1.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   1.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0\nv (in grid orientation)\n6×7 Array{Float64,2}:\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  -1.0  1.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.curl-Union{Tuple{Nodes{Dual, NX, NY, T}}, Tuple{T}, Tuple{NY}, Tuple{NX}} where {NX, NY, T}","page":"Index","title":"CartesianGrids.curl","text":"curl(w::Nodes{Dual}) --> Edges{Primal}\n\nEvaluate the discrete curl of w. Another way to perform this operation is to construct a Curl object and apply it with *.\n\nExample\n\njulia> C = Curl();\n\njulia> w = Nodes(Dual,(8,6));\n\njulia> w[3,4] = 1.0;\n\njulia> C*w\nEdges{Primal,8,6,Float64} data\nu (in grid orientation)\n5×8 Array{Float64,2}:\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  -1.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   1.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0\nv (in grid orientation)\n6×7 Array{Float64,2}:\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  -1.0  1.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.curl_cross!-Union{Tuple{C}, Tuple{Edges{C}, Edges{C}, Edges{C}}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.curl_cross!","text":"curl_cross!(out,a,b)\n\nCompute the curl of the cross product of a and b, nablatimes(atimes b), and put the result into out. Note that the result is not scaled by any grid spacing.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.diff!","page":"Index","title":"CartesianGrids.diff!","text":"diff!(out:ScalarGridData,in::ScalarGridData) -> ScalarGridData\n\nReturn the 1-d central finite difference of scalar grid data in in scalar grid data out. Either in or out must be edge component data and the other must be node data. The direction of differencing is determined by the relationship of in and out. For example, if in is dual nodes (cell by cell) and out is primal x-edge components (cell by edge), then the differencing takes place in the y direction, since they are different types in this direction.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.directional_derivative!-Union{Tuple{C}, Tuple{Edges{C}, Edges{C}, Edges{C}}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.directional_derivative!","text":"directional_derivative!(out,f,q)\n\nCompute the directional derivative of f in the direction of q, qcdotnabla f, and put the result into out. Note that the result is not scaled by any grid spacing.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.directional_derivative_conserve!-Union{Tuple{C}, Tuple{Edges{C}, Edges{C}, Edges{C}}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.directional_derivative_conserve!","text":"directional_derivative_conserve!(out,f,q)\n\nCompute the conservative form of the directional derivative of f in the direction of q, nablacdot(qf), and put the result into out. Note that the result is not scaled by any grid spacing. This form is only appropriate if q is divergence free.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.divergence!-Union{Tuple{NY}, Tuple{NX}, Tuple{Edges{Primal, NX, NY}, EdgeGradient{Primal, Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.divergence!","text":"divergence!(w::Edges,q::EdgeGradient)\n\nEvaluate the discrete divergence of edge gradient tensor data q and return it as data w. Note that q can be either primal/dual or dual/primal tensor data, and w must be, respectively, primal or edges type.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.divergence!-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Primal, NX, NY}, Edges{Primal, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.divergence!","text":"divergence!(w::Nodes,q::Edges)\n\nEvaluate the discrete divergence of edge data q and return it as nodal data w. Note that q can be either primal or dual edge data, but w must be of the same cell type.\n\nExample\n\njulia> q = Edges(Primal,(8,6));\n\njulia> q.u[3,2] = 1.0;\n\njulia> w = Nodes(Primal,(8,6));\n\njulia> divergence!(w,q)\nNodes{Primal,8,6,Float64} data\nPrinting in grid orientation (lower left is (1,1))\n5×7 Array{Float64,2}:\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  -1.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.divergence!-Union{Tuple{NY}, Tuple{NX}, Tuple{Union{XEdges{Primal, NX, NY}, YEdges{Dual, NX, NY}}, NodePair{Primal, Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.divergence!","text":"divergence!(w::XEdges/YEdges,q::NodePair)\n\nEvaluate the discrete divergence of node pair data q and return it as data w. Note that q can be either primal/dual or dual/primal node data, and w must be, respectively, primal x-edges/dual y-edges or primal y-edges/dual x-edges type.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.divergence-Union{Tuple{EdgeGradient{T, S, NX, NY}}, Tuple{NY}, Tuple{NX}, Tuple{S}, Tuple{T}} where {T<:CartesianGrids.CellType, S<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"CartesianGrids.divergence","text":"divergence(dq::EdgeGradient) --> Edges\n\nEvaluate the discrete divergence of edge gradient data dq.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.divergence-Union{Tuple{Edges{T, NX, NY}}, Tuple{NY}, Tuple{NX}, Tuple{T}} where {T<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"CartesianGrids.divergence","text":"divergence(q::Edges) --> Nodes\n\nEvaluate the discrete divergence of edge data q. Can also perform this operation by creating an object of Divergence type and applying it with *.\n\nExample\n\njulia> D = Divergence();\n\njulia> q = Edges(Primal,(8,6));\n\njulia> q.u[3,2] = 1.0;\n\njulia> D*q\nNodes{Primal,8,6,Float64} data\nPrinting in grid orientation (lower left is (1,1))\n5×7 Array{Float64,2}:\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  -1.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.exp!-Union{Tuple{CartesianGrids.Laplacian{NX, NY}}, Tuple{NY}, Tuple{NX}, Tuple{CartesianGrids.Laplacian{NX, NY}, Any}} where {NX, NY}","page":"Index","title":"CartesianGrids.exp!","text":"exp!(L::Laplacian[,Nodes(Dual)][;nthreads=L.conv.nthreads])\n\nCreate the in-place version of the integrating factor exp(L).\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grad!-Union{Tuple{NY}, Tuple{NX}, Tuple{EdgeGradient{Dual, Primal, NX, NY}, Edges{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.grad!","text":"grad!(d::EdgeGradient{Dual,Primal},q::Edges{Dual})\n\nEvaluate the discrete gradient of dual edge data q and return it as edge gradient data d, where the diagonal entries of the gradient lie on dual nodes and the off-diagonal entries lie at primal nodes.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grad!-Union{Tuple{NY}, Tuple{NX}, Tuple{EdgeGradient{Primal, Dual, NX, NY}, Edges{Primal, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.grad!","text":"grad!(d::EdgeGradient{Primal,Dual},q::Edges{Primal})\n\nEvaluate the discrete gradient of primal edge data q and return it as edge gradient data d, where the diagonal entries of the gradient lie on primal nodes and the off-diagonal entries lie at dual nodes.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grad!-Union{Tuple{NY}, Tuple{NX}, Tuple{Edges{Dual, NX, NY}, Nodes{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.grad!","text":"grad!(q::Edges{Dual},w::Nodes{Dual})\n\nEvaluate the discrete gradient of dual nodal data w and return it as dual edge data q.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grad!-Union{Tuple{NY}, Tuple{NX}, Tuple{Edges{Primal, NX, NY}, Nodes{Primal, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.grad!","text":"grad!(q::Edges{Primal},w::Nodes{Primal})\n\nEvaluate the discrete gradient of primal nodal data w and return it as primal edge data q.\n\nExample\n\njulia> w = Nodes(Primal,(8,6));\n\njulia> w[3,4] = 1.0;\n\njulia> q = Edges(Primal,(8,6));\n\njulia> grad!(q,w)\nEdges{Primal,8,6,Float64} data\nu (in grid orientation)\n5×8 Array{Float64,2}:\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  1.0  -1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\nv (in grid orientation)\n6×7 Array{Float64,2}:\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  -1.0  0.0  0.0  0.0  0.0\n 0.0  0.0   1.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grad-Union{Tuple{Edges{C, NX, NY}}, Tuple{NY}, Tuple{NX}, Tuple{C}} where {C<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"CartesianGrids.grad","text":"grad(q::Edges{Primal/Dual}) --> EdgeGradient{Dual/Primal,Primal/Dual}\n\nEvaluate the discrete gradient of primal or dual edge data q. Can also perform this operation by creating an object of Grad type and applying it with *.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grad-Union{Tuple{Nodes{Dual, NX, NY}}, Tuple{NY}, Tuple{NX}} where {NX, NY}","page":"Index","title":"CartesianGrids.grad","text":"grad(w::Nodes{Dual}) --> Edges{Dual}\n\nEvaluate the discrete gradient of dual nodal data w. Can also perform this operation by creating an object of Grad type and applying it with *.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grad-Union{Tuple{Nodes{Primal, NX, NY, T}}, Tuple{T}, Tuple{NY}, Tuple{NX}} where {NX, NY, T}","page":"Index","title":"CartesianGrids.grad","text":"grad(w::Nodes{Primal}) --> Edges{Primal}\n\nEvaluate the discrete gradient of primal nodal data w. Can also perform this operation by creating an object of Grad type and applying it with *.\n\nExample\n\njulia> w = Nodes(Primal,(8,6));\n\njulia> w[3,4] = 1.0;\n\njulia> G = Grad();\n\njulia> G*w\nEdges{Primal,8,6,Float64} data\nu (in grid orientation)\n5×8 Array{Float64,2}:\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  1.0  -1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\nv (in grid orientation)\n6×7 Array{Float64,2}:\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  -1.0  0.0  0.0  0.0  0.0\n 0.0  0.0   1.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grid_interpolate!","page":"Index","title":"CartesianGrids.grid_interpolate!","text":"grid_interpolate!(out:ScalarGridData,in::ScalarGridData) -> ScalarGridData\n\nReturn the 1-d symmetric interpolation of scalar grid data in onto scalar grid data out. Either in or out must be edge component data and the other must be node data. The direction of interpolation is determined by the relationship of in and out. For example, if in is dual nodes (cell by cell) and out is primal x-edge components (cell by edge), then the interpolation takes place in the y direction, since they are different types in this direction. (In the x direction, they are of the same type (cell), so there is no interpolation in that direction.)\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.grid_interpolate!-Union{Tuple{NY}, Tuple{NX}, Tuple{D}, Tuple{C}, Tuple{Tuple{Nodes{C, NX, NY}, Nodes{C, NX, NY}}, Edges{D, NX, NY}}} where {C<:CartesianGrids.CellType, D<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"CartesianGrids.grid_interpolate!","text":"grid_interpolate!((wx::Nodes,wy::Nodes),q::Edges)\n\nInterpolate the edge data q (of either dual or primal type) to the dual or primal nodes, and return the result in wx and wy. wx holds the shifted q.u data and wy the shifted q.v data.\n\nExample\n\njulia> q = Edges(Primal,(8,6));\n\njulia> q.u[3,2] = 1.0;\n\njulia> wx = Nodes(Dual,(8,6)); wy = deepcopy(wx);\n\njulia> grid_interpolate!((wx,wy),q);\n\njulia> wx\nNodes{Dual,8,6,Float64} data\nPrinting in grid orientation (lower left is (1,1))\n6×8 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.5  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.5  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\njulia> wy\nNodes{Dual,8,6,Float64} data\nPrinting in grid orientation (lower left is (1,1))\n6×8 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grid_interpolate!-Union{Tuple{NY}, Tuple{NX}, Tuple{EdgeGradient{Primal, Dual, NX, NY}, Edges{Primal, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.grid_interpolate!","text":"grid_interpolate!(dq::EdgeGradient{Primal/Dual},q::Edges{Primal/Dual})\n\nInterpolate the primal (dual) edge data q to primal (dual) tensor positions and hold it in dq.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grid_interpolate!-Union{Tuple{NY}, Tuple{NX}, Tuple{Edges{Dual, NX, NY}, Nodes{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.grid_interpolate!","text":"grid_interpolate!(q::Edges{Dual},w::Nodes{Dual})\n\nInterpolate the dual nodal data w to the edges of the dual cells, and return the result in q.\n\nExample\n\njulia> w = Nodes(Dual,(8,6));\n\njulia> w[3,4] = 1.0;\n\njulia> q = Edges(Dual,w);\n\njulia> grid_interpolate!(q,w)\nEdges{Dual,8,6,Float64} data\nu (in grid orientation)\n6×7 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.5  0.5  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\nv (in grid orientation)\n5×8 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.5  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.5  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grid_interpolate!-Union{Tuple{NY}, Tuple{NX}, Tuple{Edges{Primal, NX, NY}, EdgeGradient{Primal, Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.grid_interpolate!","text":"grid_interpolate!(q::Edges{Primal/Dual},dq::EdgeGradient{Primal/Dual})\n\nInterpolate the primal (dual) tensor data dq to primal (dual) edge positions and hold it in q.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grid_interpolate!-Union{Tuple{NY}, Tuple{NX}, Tuple{Edges{Primal, NX, NY}, Nodes{Primal, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.grid_interpolate!","text":"grid_interpolate!(q::Edges{Primal},w::Nodes{Primal})\n\nInterpolate the primal nodal data w to the edges of the primal cells, and return the result in q.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.grid_interpolate!-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Primal, NX, NY}, Nodes{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.grid_interpolate!","text":"grid_interpolate!(v::Nodes{Dual/Primal},q::Nodes{Primal/Dual})\n\nInterpolate the primal (resp. dual) node data q to the edges of the dual (resp. primal) nodes, and return the result in v.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.gridwise_dot!-Union{Tuple{C}, Tuple{Nodes{C}, Edges{C}, Edges{C}}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.gridwise_dot!","text":"gridwise_dot!(udotv::Nodes{Primal/Dual},u::Edges{Primal/Dual},v::Edges{Primal/Dual})\n\nCalculate the in-placed dot product of vector grid data u and v, placing the result on the cell centers or nodes in udotv.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.gridwise_dot-Union{Tuple{C}, Tuple{Edges{C}, Edges{C}}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.gridwise_dot","text":"gridwise_dot(u::Edges{Primal/Dual},v::Edges{Primal/Dual})\n\nCalculate the dot product of vector grid data u and v, placing the result on the cell centers (if data are Edges{Primal}) or nodes (if data are Edges{Dual}).\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.helmholtz!-Union{Tuple{T}, Tuple{NY}, Tuple{NX}, Tuple{Nodes{Dual, NX, NY, T}, Nodes{Dual, NX, NY, T}, Number}} where {NX, NY, T<:ComplexF64}","page":"Index","title":"CartesianGrids.helmholtz!","text":"helmholtz!(v,w,α)\n\nEvaluate the discrete Helmholtz operator (iα - L) on w and return it as v. The data w can be of type dual/primary nodes or edges; v must be of the same type. However, both have to be of complex data type.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.helmholtz-Union{Tuple{T}, Tuple{NY}, Tuple{NX}, Tuple{C}, Tuple{Nodes{C, NX, NY, T}, Number}} where {C<:CartesianGrids.CellType, NX, NY, T<:ComplexF64}","page":"Index","title":"CartesianGrids.helmholtz","text":"helmholtz(w,α)\n\nEvaluate the discrete Helmholtz operator (iα - L) on w. The data w can be of complex type dual/primary nodes or edges. The returned result is of the same type as w.\n\nExample\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.integrate-Tuple{T} where T<:GridData","page":"Index","title":"CartesianGrids.integrate","text":"integrate(p::GridData) -> Real\n\nComputes a numerical quadrature of node data.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.interpolatable_field-Tuple{AbstractArray, AbstractArray, ScalarGridData}","page":"Index","title":"CartesianGrids.interpolatable_field","text":"interpolatable_field(x,y,f::ScalarGridData)\n\nGenerates an interpolatable version of grid data f, based on coordinates in x and y (which should be in range form). The output can be called as a function with coordinate pairs as arguments.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.interpolatable_field-Tuple{AbstractRange, AbstractRange, AbstractRange, AbstractRange, Union{Edges, NodePair}}","page":"Index","title":"CartesianGrids.interpolatable_field","text":"interpolatable_field(xu,yu,xv,yv,f::EdgeData/NodePair)\n\nGenerates an interpolatable version of grid data f, based on coordinates in xu, yu, xv, yv (which should be in range form). The output can be called as a function with coordinate pairs as arguments.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.interpolatable_field-Tuple{GridData, PhysicalGrid}","page":"Index","title":"CartesianGrids.interpolatable_field","text":"interpolatable_field(f::GridData,g::PhysicalGrid)\n\nGenerates an interpolatable version of grid data f, based on grid g. The output can be called as a function with coordinate pairs as arguments.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.laplacian!-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Dual, NX, NY}, Nodes{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.laplacian!","text":"laplacian!(v,w)\n\nEvaluate the discrete Laplacian of w and return it as v. The data w can be of type dual/primary nodes or edge components or edges; v must be of the same type.\n\nExample\n\njulia> w = Nodes(Dual,(8,6));\n\njulia> v = deepcopy(w);\n\njulia> w[4,3] = 1.0;\n\njulia> laplacian!(v,w)\nNodes{Dual,8,6,Float64} data\nPrinting in grid orientation (lower left is (1,1))\n6×8 Array{Float64,2}:\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  1.0  -4.0  1.0  0.0  0.0  0.0\n 0.0  0.0  0.0   1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.laplacian-Union{Tuple{Nodes{C, NX, NY}}, Tuple{NY}, Tuple{NX}, Tuple{C}} where {C<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"CartesianGrids.laplacian","text":"laplacian(w)\n\nEvaluate the discrete Laplacian of w. The data w can be of type dual/primary nodes or edges. The returned result is of the same type as w.\n\nExample\n\njulia> q = Edges(Primal,(8,6));\n\njulia> q.u[2,2] = 1.0;\n\njulia> laplacian(q)\nEdges{Primal,8,6,Float64} data\nu (in grid orientation)\n5×8 Array{Float64,2}:\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0   1.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  -4.0  1.0  0.0  0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0  0.0\nv (in grid orientation)\n6×7 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.laplacian_symm!-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Dual, NX, NY}, Nodes{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"CartesianGrids.laplacian_symm!","text":"laplacian_symm!(v,w)\n\nEvaluate the symmetric 5-point discrete Laplacian of w and return it as v. The data w can be of type dual nodes only for now. This symmetric Laplacian also evaluates the partial Laplacians (using only available stencil data) on the ghost nodes.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.limits-Tuple{PhysicalGrid, Int64}","page":"Index","title":"CartesianGrids.limits","text":"limits(g::PhysicalGrid,d::Int) -> Tuple\n\nReturn the minimum and maximum physical dimensions in direction d for grid g.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.mag!-Union{Tuple{C}, Tuple{Nodes{C}, Edges{C}}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.mag!","text":"mag!(magu::Nodes{Primal/Dual},u::Edges{Primal/Dual})\n\nCalculate the in-placed magnitude of vector grid data u, placing the result on the cell centers in magu.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.mag-Union{Tuple{Edges{C}}, Tuple{C}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.mag","text":"mag(u::Edges{Primal/Dual}) -> Nodes{Primal/Dual}\n\nCalculate the magnitude of vector grid data u, placing the result on the cell centers.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.magsq!-Union{Tuple{C}, Tuple{Nodes{C}, Edges{C}}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.magsq!","text":"magsq!(magusq::Nodes{Primal/Dual},u::Edges{Primal/Dual})\n\nCalculate the in-placed squared magnitude of vector grid data u, placing the result on the cell centers in magusq.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.magsq-Union{Tuple{Edges{C}}, Tuple{C}} where C<:CartesianGrids.CellType","page":"Index","title":"CartesianGrids.magsq","text":"magsq(u::Edges{Primal/Dual}) -> Nodes{Primal/Dual}\n\nCalculate the squared magnitude of vector grid data u, placing the result on the cell centers.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.optimize_gridsize-Tuple{Any, Any}","page":"Index","title":"CartesianGrids.optimize_gridsize","text":"optimize_gridsize(nx0,ny0[;region_size=4,optimize_threads=true,nthreads_max=length(cpu_info()),nsamp=1])\n\nGiven a nominal grid size (nx0 x ny0), determine the optimal grid size that minimizes the compute time. Optional arguments are the optimize_threads flag and the maximum number of threads nthreads_max (if multithreading is allowed) and the number of samples to take of the cpu time for each trial. Returns optimal nx, ny, and the corresponding CPU time.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.origin-Tuple{PhysicalGrid}","page":"Index","title":"CartesianGrids.origin","text":"origin(g::PhysicalGrid) -> Tuple{Int,Int}\n\nReturn a tuple of the indices of the primal node that corresponds to the physical origin of the coordinate system used by g. Note that these indices need not lie inside the range of indices occupied by the grid. For example, if the range of physical coordinates occupied by the grid is (1.0,3.0) x (2.0,4.0), then the origin is not inside the grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.plan_helmholtz","page":"Index","title":"CartesianGrids.plan_helmholtz","text":"plan_helmholtz(dims::Tuple,α::Number,[with_inverse=false],[fftw_flags=FFTW.ESTIMATE],\n                      [factor=1.0],[dx=1.0])\n\nConstructor to set up an operator for evaluating the discrete Helmholtz operator on complex dual or primal nodal data of dimension dims. If the optional keyword with_inverse is set to true, then it also sets up the inverse Helmholtz operator (the lattice Green's function, LGF). These can then be applied, respectively, with * and \\ operations on data of the appropriate size. The optional parameter factor is a scalar used to multiply the result of the operator and divide the inverse. The optional parameter dx is used in adjusting the uniform value of the LGF to match the behavior of the continuous analog at large distances; this is set to 1.0 by default.\n\nInstead of the first argument, one can also supply w::Nodes to specify the size of the domain.\n\nExample\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.plan_helmholtz!","page":"Index","title":"CartesianGrids.plan_helmholtz!","text":"plan_helmholtz!(dims::Tuple,α::Number,[with_inverse=false],[fftw_flags=FFTW.ESTIMATE],\n                      [factor=1.0],[dx=1.0])\n\nSame as plan_helmholtz, but forms an operator that works in-place on the data it operates on.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.plan_implicit_diffusion","page":"Index","title":"CartesianGrids.plan_implicit_diffusion","text":"plan_implicit_diffusion(a::Real,dims::Tuple,[fftw_flags=FFTW.ESTIMATE])\n\nConstructor to set up the forward and inverse operators of I - a*L where L is the discrete Laplacian (not scaled by grid spacing) and a is a real-valued parameter. This can then be applied with the * or `` operation on data of the appropriate size.\n\nThe dims argument can be replaced with data of type ScalarGridData to specify the size of the domain.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.plan_implicit_diffusion!","page":"Index","title":"CartesianGrids.plan_implicit_diffusion!","text":"plan_implicit_diffusion!(a::Real,dims::Tuple,[fftw_flags=FFTW.ESTIMATE][,nthreads=length(Sys.cpu_info())])\n\nSame as plan_implicit_diffusion, but the resulting operator performs an in-place operation on data. The number of threads threads defaults to the number of logical CPU cores on the system.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.plan_intfact","page":"Index","title":"CartesianGrids.plan_intfact","text":"plan_intfact(a::Real,dims::Tuple,[fftw_flags=FFTW.ESTIMATE])\n\nConstructor to set up an operator for evaluating the integrating factor with real-valued parameter a. This can then be applied with the * or `` operation on data of the appropriate size.\n\nNote that a can be positive, negative, or zero. However, if a is negative, then only the operation is actually correct the * operation merely returns the identity to avoid excessive (and noisy) calculation Similarly if a is positive the operation returns the identity. Thus, these operations are not inverses of one another. If a is zero, both operations return the identity.\n\nThe dims argument can be replaced with data of type ScalarGridData to specify the size of the domain.\n\nExample\n\njulia> w = Nodes(Dual,(6,6));\n\njulia> w[4,4] = 1.0;\n\njulia> E = plan_intfact(1.0,(6,6))\nIntegrating factor with parameter 1.0 on a (nx = 6, ny = 6) grid\n\njulia> E*w\nNodes{Dual,6,6,Float64} data\nPrinting in grid orientation (lower left is (1,1))\n6×6 Array{Float64,2}:\n 0.00268447   0.00869352  0.0200715   0.028765    0.0200715   0.00869352\n 0.00619787   0.0200715   0.0463409   0.0664124   0.0463409   0.0200715\n 0.00888233   0.028765    0.0664124   0.0951774   0.0664124   0.028765\n 0.00619787   0.0200715   0.0463409   0.0664124   0.0463409   0.0200715\n 0.00268447   0.00869352  0.0200715   0.028765    0.0200715   0.00869352\n 0.000828935  0.00268447  0.00619787  0.00888233  0.00619787  0.00268447\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.plan_intfact!","page":"Index","title":"CartesianGrids.plan_intfact!","text":"plan_intfact!(a::Real,dims::Tuple,[fftw_flags=FFTW.ESTIMATE][,nthreads=length(Sys.cpu_info())])\n\nSame as plan_intfact, but the resulting operator performs an in-place operation on data. The number of threads threads defaults to the number of logical CPU cores on the system.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.plan_laplacian","page":"Index","title":"CartesianGrids.plan_laplacian","text":"plan_laplacian(dims::Tuple,[with_inverse=false],[fftw_flags=FFTW.ESTIMATE],\n                      [factor=1.0],[dx=1.0],[dtype=Float64])\n\nConstructor to set up an operator for evaluating the discrete Laplacian on dual or primal nodal data of dimension dims. If the optional keyword with_inverse is set to true, then it also sets up the inverse Laplacian (the lattice Green's function, LGF). These can then be applied, respectively, with * and \\ operations on data of the appropriate size. The optional parameter factor is a scalar used to multiply the result of the operator and divide the inverse. The optional parameter dx is used in adjusting the uniform value of the LGF to match the behavior of the continuous analog at large distances; this is set to 1.0 by default. The type of data on which to act is floating point by default, but can also be ComplexF64. This is specified with the optional parameter dtype\n\nInstead of the first argument, one can also supply w::Nodes to specify the size of the domain.\n\nExample\n\njulia> w = Nodes(Dual,(5,5));\n\njulia> w[3,3] = 1.0;\n\njulia> L = plan_laplacian(5,5;with_inverse=true)\nDiscrete Laplacian (and inverse) on a (nx = 5, ny = 5) grid acting on Float64 data with spacing 1.0\n\njulia> s = L\\w\nNodes{Dual,5,5,Float64} data\nPrinting in grid orientation (lower left is (1,1))\n5×5 Array{Float64,2}:\n 0.16707    0.129276     0.106037     0.129276    0.16707\n 0.129276   0.0609665   -0.00734343   0.0609665   0.129276\n 0.106037  -0.00734343  -0.257343    -0.00734343  0.106037\n 0.129276   0.0609665   -0.00734343   0.0609665   0.129276\n 0.16707    0.129276     0.106037     0.129276    0.16707\n\njulia> L*s ≈ w\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.plan_laplacian!","page":"Index","title":"CartesianGrids.plan_laplacian!","text":"plan_laplacian!(dims::Tuple,[with_inverse=false],[fftw_flags=FFTW.ESTIMATE],\n                      [factor=1.0][,nthreads=length(Sys.cpu_info())])\n\nSame as plan_laplacian, but operates in-place on data. The number of threads threads defaults to the number of logical CPU cores on the system.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.pointwise_cross!-Union{Tuple{N}, Tuple{ScalarData{N}, VectorData{N}, VectorData{N}}} where N","page":"Index","title":"CartesianGrids.pointwise_cross!","text":"pointwise_cross!(C::ScalarData,A::VectorData,B::VectorData) -> ScalarData\n\nCompute the cross product between the vector point data A and B and return the result as scalar data C (treated as an out-of-plane component of a vector).\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.pointwise_cross!-Union{Tuple{N}, Tuple{VectorData{N}, ScalarData{N}, VectorData{N}}} where N","page":"Index","title":"CartesianGrids.pointwise_cross!","text":"pointwise_cross!(C::VectorData,A::ScalarData/VectorData,B::VectorData/ScalarData) -> VectorData\n\nCompute the cross product between the point data A and B, one of which is scalar data and treated as an out-of-plane component of a vector, while the other is in-plane vector data, and return the result as vector data C.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.pointwise_cross-Tuple{Union{Number, ScalarData}, VectorData}","page":"Index","title":"CartesianGrids.pointwise_cross","text":"pointwise_cross(a::Number/ScalarData,A::VectorData) -> VectorData\n\nCompute the cross product between the scalar a (treated as an out-of-plane component of a vector) and the planar vector data A.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.pointwise_cross-Union{Tuple{N}, Tuple{ScalarData{N}, VectorData{N}}} where N","page":"Index","title":"CartesianGrids.pointwise_cross","text":"pointwise_cross(A::VectorData/ScalarData,B::ScalarData/VectorData) -> VectorData\n\nCompute the cross product between the point data A and B, one of which is scalar data and treated as an out-of-plane component of a vector, while the other is in-plane vector data, and return the result as vector data\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.pointwise_cross-Union{Tuple{N}, Tuple{VectorData{N}, VectorData{N}}} where N","page":"Index","title":"CartesianGrids.pointwise_cross","text":"pointwise_cross(A::VectorData,B::VectorData) -> ScalarData\n\nCompute the cross product between the vector point data A and B and return the result as scalar data (treated as an out-of-plane component of a vector).\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.pointwise_dot!-Union{Tuple{N}, Tuple{ScalarData{N}, VectorData{N}, VectorData{N}}} where N","page":"Index","title":"CartesianGrids.pointwise_dot!","text":"pointwise_dot!(C::ScalarData,A::VectorData,B::VectorData) -> ScalarData\n\nCompute the element by element dot product between A and B and return the result in C.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.pointwise_dot!-Union{Tuple{N}, Tuple{VectorData{N}, VectorData{N}, TensorData{N}}} where N","page":"Index","title":"CartesianGrids.pointwise_dot!","text":"pointwise_dot!(C::VectorData,A::TensorData/VectorData,B::VectorData/TensorData) -> VectorData\n\nCompute the element by element dot product between A and B, where one is TensorData and the other is VectorData and return the result as VectorData in C.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.pointwise_dot-Union{Tuple{N}, Tuple{VectorData{N}, TensorData{N}}} where N","page":"Index","title":"CartesianGrids.pointwise_dot","text":"pointwise_dot(A::TensorData/VectorData,B::VectorData/TensorData) -> VectorData\n\nCompute the element by element dot product between A and B, where one is TensorData and the other is VectorData and return the result as VectorData.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.pointwise_dot-Union{Tuple{N}, Tuple{VectorData{N}, VectorData{N}}} where N","page":"Index","title":"CartesianGrids.pointwise_dot","text":"pointwise_dot(A::VectorData,B::VectorData) -> ScalarData\n\nCompute the element by element dot product between A and B and return the result as ScalarData.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.pointwise_tensorproduct!-Union{Tuple{N}, Tuple{TensorData{N}, VectorData{N}, VectorData{N}}} where N","page":"Index","title":"CartesianGrids.pointwise_tensorproduct!","text":"pointwise_tensorproduct!(pq::TensorData,p::VectorData,q::VectorData) -> TensorData\n\nCalculate the element by element tensor product between vectors p and q, returning data in pq\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.product","page":"Index","title":"CartesianGrids.product","text":"product(p::PointData,q::PointData) -> PointData\n(∘)(p::PointData,q::PointData) -> PointData\n\nCompute the Hadamard (i.e. element by element) product of point data data p and q. Works similarly to product!.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#CartesianGrids.product!-Union{Tuple{N}, Tuple{PointData{N}, PointData{N}, PointData{N}}} where N","page":"Index","title":"CartesianGrids.product!","text":"product!(out::PointData,p::PointData,q::PointData)\n\nCompute the Hadamard (i.e. element by element) product of point data data p and q and return the result in out. Note that p and q can be of mixed type (scalar, vector, tensor), as long as one of them is a scalar. Also, out must have element type that is consistent with the promoted type of p and q.\n\nExample\n\njulia> fcs = ScalarData(5,dtype=ComplexF64);\n\njulia> fill!(fcs,2im)\n5 points of scalar-valued Complex{Float64} data\n5-element Array{Complex{Float64},1}:\n 0.0 + 2.0im\n 0.0 + 2.0im\n 0.0 + 2.0im\n 0.0 + 2.0im\n 0.0 + 2.0im\n\njulia> frt = TensorData(fcs,dtype=Float64);\n\njulia> fill!(frt,1.0)\n5 points of tensor-valued Float64 data dudx, dudy, dvdx, dvdy\n5×4 Array{Float64,2}:\n 1.0  1.0  1.0  1.0\n 1.0  1.0  1.0  1.0\n 1.0  1.0  1.0  1.0\n 1.0  1.0  1.0  1.0\n 1.0  1.0  1.0  1.0\n\njulia> out = similar(frt,element_type=ComplexF64);\n\njulia> product!(out,frt,fcs)\n5 points of tensor-valued Complex{Float64} data dudx, dudy, dvdx, dvdy\n5×4 Array{Complex{Float64},2}:\n 0.0+2.0im  0.0+2.0im  0.0+2.0im  0.0+2.0im\n 0.0+2.0im  0.0+2.0im  0.0+2.0im  0.0+2.0im\n 0.0+2.0im  0.0+2.0im  0.0+2.0im  0.0+2.0im\n 0.0+2.0im  0.0+2.0im  0.0+2.0im  0.0+2.0im\n 0.0+2.0im  0.0+2.0im  0.0+2.0im  0.0+2.0im\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.product!-Union{Tuple{T}, Tuple{T, T, T}} where T<:GridData","page":"Index","title":"CartesianGrids.product!","text":"product!(out::GridData,p::GridData,q::GridData)\n\nCompute the Hadamard (i.e. element by element) product of grid data p and q (of the same type) and return the result in out.\n\nExample\n\njulia> q = Edges(Dual,(8,6));\n\njulia> out = p = deepcopy(q);\n\njulia> q.u[3,2] = 0.3;\n\njulia> p.u[3,2] = 0.2;\n\njulia> product!(out,p,q)\nEdges{Dual,8,6,Float64} data\nu (in grid orientation)\n6×7 Array{Float64,2}:\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  0.0  0.06  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\nv (in grid orientation)\n5×8 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.product-Union{Tuple{T}, Tuple{T, T}} where T<:GridData","page":"Index","title":"CartesianGrids.product","text":"product(p::Edges/Nodes,q::Edges/Nodes) --> Edges/Nodes\n\nCompute the Hadamard product of edge or nodal (primal or dual) data p and q and return the result. This operation can also be carried out with the ∘ operator:\n\nExample\n\njulia> q = Edges(Dual,(8,6));\n\njulia> p = deepcopy(q);\n\njulia> q.u[3,2] = 0.3;\n\njulia> p.u[3,2] = 0.2;\n\njulia> p∘q\nEdges{Dual,8,6,Float64} data\nu (in grid orientation)\n6×7 Array{Float64,2}:\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  0.0  0.06  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0   0.0  0.0  0.0  0.0\nv (in grid orientation)\n5×8 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.tensorproduct!-Union{Tuple{NY}, Tuple{NX}, Tuple{D}, Tuple{C}, Tuple{EdgeGradient{C, D, NX, NY}, Edges{C, NX, NY}, Edges{C, NX, NY}, EdgeGradient{C, D, NX, NY}, EdgeGradient{C, D, NX, NY}}} where {C<:CartesianGrids.CellType, D<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"CartesianGrids.tensorproduct!","text":"tensorproduct!(q::EdgeGradient,u::Edges,v::Edges,ut::EdgeGradient,vt::EdgeGradient)\n\nIn-place tensor product of u and v, with the result returned in q. The ut and vt are supplied as temporary storage.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.test_cputime-Tuple{Any, Any, Any}","page":"Index","title":"CartesianGrids.test_cputime","text":"test_cputime(nx,ny,nthreads_max;[nsamp=1][,testtype=:laplacian][,kwargs]) -> Float64, Float64\n\nEvaluate a sample FFT-based problem with the given size of grid nx x ny and the provided maximum number of threads nthreads_max. Returns the mean and standard deviation of the computational time. The optional argument nsamp can be used to perform an average timing over multiple samples. The test type is specified with the testtype optional argument. The default test is inversion of a Laplacian (:laplacian). Other options are :intfact and :helmholtz.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#CartesianGrids.volume-Union{Tuple{PhysicalGrid{ND}}, Tuple{ND}} where ND","page":"Index","title":"CartesianGrids.volume","text":"volume(g::PhysicalGrid) -> Float64\n\nReturn the volume (or area) of the physical grid g.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{NY}, Tuple{NX}, Tuple{C}, Tuple{Edges{C, NX, NY}, Edges{C, NX, NY}}} where {C<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"LinearAlgebra.dot","text":"dot(p1::Edges{Dual/Primal},p2::Edges{Dual/Primal}) -> Real\n\nComputes the inner product between two sets of edge data on the same grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{NY}, Tuple{NX}, Tuple{D}, Tuple{C}, Tuple{EdgeGradient{C, D, NX, NY}, EdgeGradient{C, D, NX, NY}}} where {C<:CartesianGrids.CellType, D<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"LinearAlgebra.dot","text":"dot(p1::EdgeGradient{Dual/Primal},p2::EdgeGradient{Dual/Primal}) -> Real\n\nComputes the inner product between two sets of edge gradient data on the same grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Dual, NX, NY}, Nodes{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"LinearAlgebra.dot","text":"dot(p1::Nodes{Dual},p2::Nodes{Dual}) -> Real\n\nComputes the inner product between two sets of dual node data on the same grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Primal, NX, NY}, Nodes{Primal, NX, NY}}} where {NX, NY}","page":"Index","title":"LinearAlgebra.dot","text":"dot(p1::Nodes{Primal},p2::Nodes{Primal}) -> Real\n\nComputes the inner product between two sets of primal node data on the same grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{NY}, Tuple{NX}, Tuple{XEdges{Dual, NX, NY}, XEdges{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"LinearAlgebra.dot","text":"dot(p1::XEdges{Dual},p2::XEdges{Dual}) -> Real\n\nComputes the inner product between two sets of dual x-edge component data on the same grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{NY}, Tuple{NX}, Tuple{XEdges{Primal, NX, NY}, XEdges{Primal, NX, NY}}} where {NX, NY}","page":"Index","title":"LinearAlgebra.dot","text":"dot(p1::XEdges{Primal},p2::XEdges{Primal}) -> Real\n\nComputes the inner product between two sets of primal x-edge component data on the same grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{NY}, Tuple{NX}, Tuple{YEdges{Dual, NX, NY}, YEdges{Dual, NX, NY}}} where {NX, NY}","page":"Index","title":"LinearAlgebra.dot","text":"dot(p1::YEdges{Dual},p2::YEdges{Dual}) -> Real\n\nComputes the inner product between two sets of dual y-edge component data on the same grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{NY}, Tuple{NX}, Tuple{YEdges{Primal, NX, NY}, YEdges{Primal, NX, NY}}} where {NX, NY}","page":"Index","title":"LinearAlgebra.dot","text":"dot(p1::YEdges{Primal},p2::YEdges{Primal}) -> Real\n\nComputes the inner product between two sets of primal y-edge component data on the same grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{T}, Tuple{Tuple{T, T}, TensorData}} where T<:Number","page":"Index","title":"LinearAlgebra.dot","text":"dot(A::Tuple{T,T},B::TensorData) where {T<:Number} -> VectorData\n⋅(A::Tuple{T,T},B::TensorData) where {T<:Number} -> VectorData\n\nComputes the dot product between the tuple A and the elements of a tensor B on a set of points and returns vector data on the same set of points.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.dot-Union{Tuple{T}, Tuple{Tuple{T, T}, VectorData}} where T<:Number","page":"Index","title":"LinearAlgebra.dot","text":"dot(A::Tuple{T,T},B::VectorData) where {T<:Number} -> ScalarData\n⋅(A::Tuple{T,T},B::VectorData) where {T<:Number} -> ScalarData\n\nComputes the dot product between the tuple v and the elements of a tensor B on a set of points and returns scalar data on the same set of points.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.norm-Tuple{GridData}","page":"Index","title":"LinearAlgebra.norm","text":"norm(p::GridData) -> Real\n\nComputes the L2 norm of data on a grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.transpose!-Union{Tuple{NY}, Tuple{NX}, Tuple{D}, Tuple{C}, Tuple{EdgeGradient{C, D, NX, NY}, EdgeGradient{C, D, NX, NY}}} where {C<:CartesianGrids.CellType, D<:CartesianGrids.CellType, NX, NY}","page":"Index","title":"LinearAlgebra.transpose!","text":"transpose!(pt::EdgeGradient,p::EdgeGradient)\n\nIn-place element-by-element transpose of EdgeGradient p.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#LinearAlgebra.transpose!-Union{Tuple{N}, Tuple{TensorData{N}, TensorData{N}}} where N","page":"Index","title":"LinearAlgebra.transpose!","text":"transpose!(pt::TensorData,p::TensorData)\n\nIn-place element-by-element transpose of TensorData p.\n\n\n\n\n\n","category":"method"},{"location":"manual/finitediff/#Mimetic-calculus-on-grid-data","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"","category":"section"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"defddt1fracmathrmd1mathrmdt\n\nrenewcommandvecboldsymbol\nnewcommanduvec1vechat1\nnewcommandutangentuvectau\nnewcommandunormaluvecn\n\nrenewcommanddmathrmd","category":"page"},{"location":"manual/finitediff/#Field-differencing-operations","page":"Mimetic calculus on grid data","title":"Field differencing operations","text":"","category":"section"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Field operations transform one data type to another. Some of these are differencing operations, analogous to differential counterparts in continuum calculus: curl, divergence, and gradient. For example, a curl operation can act upon dual nodal data (like streamfunction) and return primal edge data (i.e. velocity); a divergence operation acts on edge data (primal or dual) and returns nodal data of the same cell type. Note that these operations are mimetic: they maintain some of the same properties as the continuous counterparts. For example, the divergence of the curl of any dual nodal data is exactly zero. The curl of the gradient of primal nodal data is also zero.","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Let's take the curl of the dual nodal data we constructed:","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"using CartesianGrids\nusing Plots","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"w = Nodes(Dual,(5,4)) # hide\nw .= reshape(1:20,5,4) # hide\ncurl(w)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"We could also make this a little more cute by giving the curl operator a symbol and then acting upon the data as though it were a matrix-vector operation:","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"C = Curl()\nC*w","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Note that C is not actually a matrix. Rather, it is simply another name for the curl operator, and * is defined in this context to apply curl to whatever is to the right of it. The other operators have similar constructs.","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Suppose we wish to apply the curl operation over and over. The curl() function allocates memory for the result whenever it is used; this would become expensive if it is done often. So it makes sense to preallocate space for this result and use the curl!() function, which simply fills in the elements:","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"q = Edges(Primal,w)\ncurl!(q,w)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Note that we used a convenience function for setting up primal edge data q of a size that corresponds with w.","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Let's check that divergence of the curl is indeed zero:","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"D = Divergence()\nD*(C*w)","category":"page"},{"location":"manual/finitediff/#The-Laplacian-and-its-inverse","page":"Mimetic calculus on grid data","title":"The Laplacian and its inverse","text":"","category":"section"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"CartesianGrids also makes heavy use of the discrete Laplacian operator, L. This mimics the continuous operator, nabla^2, and acts upon data of any type. Let's apply this to the original data:","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"laplacian(w)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"As with the other operators, we can also construct a shorthand of the discrete Laplacian operator,","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"L = plan_laplacian(size(w))\nL*w","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"An important part of CartesianGrids is the inverse of this operator. That is, we need the ability to solve the discrete Poisson system","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Ls = w","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"for s, for given data w. We achieve this in CartesianGrids with the lattice Green's function. To outfit the operator with its inverse, we simply set the optional flag:","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"L = plan_laplacian(size(w),with_inverse=true)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Then, the Poisson system is solved with the backslash (\\),","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"s = L\\w\nL*s","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"It should be observed that the cells on the perimeter have not recovered the original values of w. These are the ghost cells, and the Laplacian operation does not apply to these.","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"It is also important to note that, although it looks as though we've constructed a matrix L and performed various matrix-vector operations with it, this is not actually the case. In fact, the \\ operation associated with L is significantly faster than a matrix inversion. Internally, it carries out a fast convolution between the data in w and the lattice Green's function, via fast Fourier transform. The lattice Green's function (LGF) table is pre-computed and pre-transformed in the original construction of L. (In fact, because this table is not dependent on the size of the grid, it is actually computed once for all time and stored in a file; subsequent applications of it just load it in and use the portion of it necessary for a certain grid.)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"The lattice Green's function has the advantage that it is independent of the grid size. Let's solve the Poisson system when w is a unit field, i.e. a field of zeros, except for a single 1 entry at one node. The solution s represents the influence of this point on all nodes. To see that the LGF does not depend on the grid size, let's use a grid that is long and skinny and plot the solution on it","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"w = Nodes(Dual,(50,10));\nw[20,5] = 1.0\nL = plan_laplacian(w,with_inverse=true)\nplot(L\\w)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"The influence is not affected by the narrow grid dimensions.","category":"page"},{"location":"manual/finitediff/#The-integrating-factor","page":"Mimetic calculus on grid data","title":"The integrating factor","text":"","category":"section"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"An operator related to the lattice Green's function is the integrating factor. Suppose we have the system of ODEs","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"ddt u = L u + f(ut) quad u(0) = u_0","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"where L is the discrete Laplacian (on an infinite uniform grid), and u are nodal data (and f is a nodal-valued function acting on this nodal data). The exact solution of this problem is","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"u(t) = E(t)u_0 + int_0^t E(t-tau) f(u(tau)tau)mathrmdtau","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"where E(t) is the integrating factor (or matrix exponential) for the system. The easiest way to understand the role of E(t) is to consider its behavior when f is zero and u_0 contains a field of zeros except for a single 1 entry at one cell. Let's set up this initial data:","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"u0 = Nodes(Dual,(100,100));\nu0[40,50] = 1.0\nplot(u0)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Then, E(t)u_0 diffuses this initial unit perturbation in each direction. Here, we apply it with t = 5:","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"E = plan_intfact(5,u0)\nplot(E*u0)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Note that E(0) = I, where I is the identity. Also, the integrating factor has the useful property that E(t+tau) = E(t)E(tau). From these properties, it follows that E^-1(t) = E(-t). Let's suppose we wish to advance u from time t = tau-h to time t = tau. For any t in this interval, we can define an auxiliary quantity, v(ttau) = E(tau-t)u(t), which represents the instantaneous value of u, but diffused to the end of the time interval. This new quantity satisfies the modified set of ODEs","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"ddt v = E(tau-t) fleft E(t-tau) v(ttau)trightquad v(tau-htau) = E(h)u(tau-h)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"The result of integrating this set of ODEs to t = tau is v(tautau) = u(tau). In other words, the integrating factor allows us to solve a somewhat reduced set of ODEs.","category":"page"},{"location":"manual/finitediff/#Other-field-operations","page":"Mimetic calculus on grid data","title":"Other field operations","text":"","category":"section"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Other field operations shift the data, by local averaging, from one data type to another. These operations are all called grid_interpolate!, and they require that the target data be preallocated. For example, to interpolate dual node data to the dual edges,","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"w = Nodes(Dual,(5,4));\nw .= reshape(1:20,5,4)\nWw = Edges(Dual,w);\ngrid_interpolate!(Ww,w)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"Note that the edges in the ghost cells are 0; these edges are not assigned any values in the interpolate operation.","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"We can then interpolate this to primal edges:","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"q = Edges(Primal,w);\ngrid_interpolate!(q,Ww)","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"We can also compute the Hadamard (i.e. element by element) product of any data of the same type, e.g.,","category":"page"},{"location":"manual/finitediff/","page":"Mimetic calculus on grid data","title":"Mimetic calculus on grid data","text":"q∘q","category":"page"},{"location":"#CartesianGrids.jl","page":"Home","title":"CartesianGrids.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a framework for working with spatial fields discretized on or immersed in Cartesian grids","category":"page"},{"location":"","page":"Home","title":"Home","text":"The purpose of this package is to enable easy setup of and operations on spatial fields on 2-d uniform staggered Cartesian grids. Tools are provided for","category":"page"},{"location":"","page":"Home","title":"Home","text":"Constructing field data that lie in the different finite-dimensional spaces of the grid: the centers, corners, and edges of the cells\nPerforming discretely-mimetic differential calculus operations on these data, such as div, grad, curl, etc. These operations are carried out in a manner that transforms them between the spaces.\nSolving Poisson's equation on infinite grids using the lattice Green's function\nImmersing data on co-dimension one and two entities (points, curves) into the grid\nPerforming operations on these co-dimension data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Many of the core aspects of the fluid-body interaction are based on the immersed boundary projection method, developed by Taira and Colonius [1].","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package works on Julia 1.0 and higher and is registered in the general Julia registry. To install, type","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add CartesianGrids","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CartesianGrids","category":"page"},{"location":"","page":"Home","title":"Home","text":"The plots in this documentation are generated using Plots.jl. You might want to install that, too, to follow the examples.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]: Taira, K. and Colonius, T. (2007) \"The immersed boundary method: a projection approach,\" J. Comput. Phys., 225, 2118–2137.","category":"page"}]
}
